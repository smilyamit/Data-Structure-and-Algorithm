#####################################################
5 tips:
(1)Divide and conquer
(2)comment
(3)Data structure & algorithm
(4)programming paradime/approach
(5)learn from other codes
######################################################

1 A)#Data Structure?
DS is a way to organize the data so that it enables us to process it in efficient time

#Algorithm
It is a set of rules to be followed to solve a problem

#why compqnies ask ds and algorithm?
=> to check problem solving skill
=> to check coding/testing skill

#Why we need different ds?
Every ds have different property and diff ds is used for different problem for eg
Tree ds: used for parent-child relationship
Graph ds: used for distance relationship
Queue ds: used for sequence problem

1 B) # What is recursion? (works on principle of lifo)
=> (opening a small box from big box and so on... at end get gold ring)
1) Same operation is performed multiple times with different input
2) In every step we try to make the problem smaller
3) We must have a base condition, which tells the system when to stop the recursion

* when to use recurssion and when to use loop (iterations)
Recn: whenever a given problem can be broken down into similiar problem
It is heavily used in ds like in tree, graph
it is heavily used in algo technique like divide & conquer, greedy algorithm & Dynamic Programming

* Recursion works by the help of stack memory. In short all pending work of recursion is stacked in stack memory
  (logical data structrue)
use case (factorial, fib)

def fib(n):
  if n< 1:
    return error
  if n <=2:
    return n-1
  else:
    return (fib(n-1) + fib(n-2))


print(fib(8))

# for first n sec postn in fib no is reserved as 0 and 1 so n-1
#remer in fibonacci there is no 0th index

#Recursion vs iteration(loop)
rescurn (space more, time more, easy code yes)
itern (space less, time less, easy code no)

## when to use recurn & when not to use
use:
when problem can be break down in similiar sub problem
time and space in memory is not a concern
when just a solution is required (no emphasis on efficient)

no use:
Don't use if above 3 condition is not satisfied. in short in critical and emergency condn like car airbag, embedded sysm


# Practical use of recursion
=> stack
=> Tree (traversal/searching/insertion/deletion
=>sorting (quick sort and merge sort)
=> divide and conquer
=> dynamic programming.. etc

1 c) Algorithm runtime analysis
It is a study of given algorithm runtime  by identifying its behaviour as the input size of the algorithm increases
by layman term: how much time will given algorithm will take to run
eg( car milegae  on highway: 20(best), in mix env: 15(avg) , in city: 10(worst)

3 notations in runtime analysis:
1) omega (algo will not take less than given(min) time) (1 unit of time)
2) Big-o (algo will not take more than given(max) time)  (n unit of time) => in practical use
3)Theta algo will  take in between  given(aveg) time interval) (n/2 unit of time)

# Most common eg of algorithm runtime complexities:
o(n) ------->constant*        adding an element at front of linked list (also called as order of 1)
o(logn) -------> logarithmic* finding an element in an sorted array.    (also called as order of logarithemic)
o(n).   -------> linear*      finding an element in an unsorted array
o(nlogn)-------> linear log*            linearlogarithmic merge sort
o(n^2)  ------->  quardatic*  shortest path between two nodes in a graph
o(n^3) ------->. cubic*       matrix multiplication
o(2^n) ------->. exponential* tower of hanoi problem

2 a] Array
#what n why array
#Types of array (1d,2d,3d,... in java upto 255 dimn of array possible but 1d,2d are more useful)
#How is array represented in memory (only in 1 dim form)

#Common operations like creating, inserting, traversing, accessing, deleting, searching, etc

*creating = (declaring(eg array), instantiation (compiler locates memory location), intializing a 1d array ())
* traversing (array traversal means we name first index in memeory location as eg x102 +0  than for next no we just
  increment by 1,2,3 for eg x102 +1, x102+2....)
*



# practical use of array (tc-time complexity, sc- space complexity)
*popular method used in array
creating an array    tc -->O(1) sc--> O(1)
inserting an array.  tc -->O(1) sc--> O(1)
traversing an array. tc -->O(mn) sc--> O(1)
accessing given value tc -->O(1) sc--> O(1)
searching a given value tc -->O(mn) sc--> O(1)
deleting a given cells value tc -->O(1) sc--> O(1)

# when to use/avoid array
note: if there is 2,3 value only than it can be stored by declaring variable
* when to use:
when there is a need to store multiple similar type of data
when random access is regular affair

* when to avoid
data to be stored is non -homogenous
when no of data to be stored is not known (linked list is better here as all of this is done in runtime)

#jdk= java development kit (it comes with java SE)
#intelli j : A good editor to run java program in commandline (no gui)

################################################################
#basic java template while creating  java inside intelli j for first time
package com.company;

public class Main {

    public static void main(String[] args) {
	   // print your code here
    // eg System.out.println("hello world);
    }
}
##############################################################

In java 
primitive type data is used to store simple value
reference type data is used to store complex objects
both are different in memory mangement

*paramter vs argument
=>parameter are those which we define in our method
=>arguments  are the actual values that we pass to those methods

## if any cell of an array empty means it is having the value of 2^-31 achieved by
 eg int arr[] = null; 
 arr[i] = Intezer.Min_Value
 
#2 b] linked list
types:
linear chained link list 
circular chain link list
double linked list
double circular linked list
In all we have => creation, insertion, traversing,searching , deletion of node, deletion of linked list
and its related to time complexity and space complexity

#3 Logical datastructure
a) stack
--> create stack()
---> push() (similar to insert)
---> pop() (similar to remove)
---> peek()
--->isEmpty
--->isFull
--->DeleteStack()

##pros/cons for stack in array
easy to implement
con: fixed size of array



##pros/cons for stack in linked list
-variable size
-con: moderate in implementation

# how push work in stack
* algorithm
push(nodeValue):
node.value = nodeValue
node.next = header // so intially header adress will be null so node address will be also null
header = node  // now let suppose we update header with some address 111 than this address will be assigned at node just 
               below it. this address will be link between header and node

# peek() // by this operation you can see the first element from stack without popping it out
peek():
return headert.value

# IsEmpty():
if (headers equal null)
 return true

else
return false

#deleteStack

deleteStack()
header = null

When to use stack and when not
# use
1 helps manage the data in a particularway
2 cannot be easily corrupted

#dont use
1 when u want to access the data randomly it is not possible
 so if you have dont some mistkae with some data which are in the middle of stack than it will be costly to rectify
 

#3 b) Queue (fifo: first in first out)
use:
Serving requests on a single shared resource, like a printer
Call Center phone systems uses Queues to hold people calling them in an order
Handling of interrupts in real-time systems

types:

array
linear queue
ciccular queue

linked list
linear queue 
circular queue (not possible)

# operations in queue
createQueue()
enQueue()
deQueue()
peekinQueue()
isEmpty()
isFull()
deleteQueue()

note:
for dequeing (means for removing value), beginning of queue come in action
for enquing (means for adding value), last(top) of queue come in action

# 3 c) Binary Tree
## BST (Binary Search Tree)
# Successor
the least value in the right of subtree is called successor

#predecor
root node value is called predecor

#Balanced and unbalanced BST
*) AVL tree(Adelson-Velsky and Landis) Tree = It is a self balancing balancing tree

#Application of BST
1) A Self-Balancing Binary Search Tree is used to maintain sorted stream of data. For example,
suppose we are getting online orders placed and we want to maintain the live data (in RAM) in sorted order of prices

2)  allows fast search, insert, delete on a sorted data
3) It also allows finding closest item


# Extra 1 - Recurssion , Extra-2 Hashing, Extra-3 Sorting

# Extra 2) Hashing
Hashing is a method of sorting and indexing data. The idea behind hashing is to allow large amounts of data to be indexed 
using keys commonly created by using formulas

#some terminologies:
Hash function: a hash function is any function that can be used to map data of arbitary size to data of fixed size
key: input data given user
hash value: The values returned by a hash function are called hash values
hash table: It is a data structure which implements an associate array abstract

# Extra 3) Sorting















